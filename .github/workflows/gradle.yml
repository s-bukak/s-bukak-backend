name: Deploy to Amazon EC2

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: "adopt"

      - name: Make application-prod.yaml
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch ./application-prod.yaml
          echo "${{ secrets.APPLICATION_PROD_YAML }}" > ./application-prod.yaml
        shell: bash

      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test
          ls -l ./build/libs/

      - name: Docker build & push to docker repo
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build --no-cache -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/sbukak .
          docker push ${{ secrets.DOCKER_USERNAME }}/sbukak

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            # 기존 컨테이너가 있으면 중지하고 제거합니다.
            docker stop sbukak || true
            docker rm sbukak || true
            
            # 새로운 컨테이너를 8080 포트에서 실행합니다.
            docker run -d --name sbukak -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/sbukak:latest
            
            # 새로운 컨테이너의 헬스 체크를 수행하여 준비가 완료되면 배포가 완료됩니다.
            until curl -sSf http://localhost:8080/actuator/health; do
                echo "Waiting for new container to be healthy..."
                sleep 3
            done

            # 사용하지 않는 Docker 리소스를 정리합니다.
            docker image prune -a -f
